
//======= Copyright (c) Stereolabs Corporation, All rights reserved. ===============

using UnityEngine;

/// <summary>
/// Renders the mesh generated by ZEDSpatialMappingManager in a second, hidden camera created at runtume. 
/// This gets the wireframe style with no performance loss.
/// This script is very similar to how ZEDPlaneRenderer works for Plane Detection. 
/// </summary>
public class ZEDMeshRenderer : MonoBehaviour
{

    /// <summary>
    /// Reference to the hidden camera we create at runtime. 
    /// </summary>
    private Camera cam;

    /// <summary>
    /// Target texture of the rendering done by the new camera.
    /// </summary>
    private RenderTexture meshTex;

    /// <summary>
    /// Checks if the spatial mapping has started.
    /// </summary>
    private bool hasStarted = false;

    /// <summary>
    /// Checks if the mesh requested is textured. If so, deativate the wireframe.
    /// </summary>
    [HideInInspector]
    static public bool isTextured = false;

    /// <summary>
    /// Shader used to render the wireframe. Normally Mat_ZED_Wireframe_Video_Overlay. 
    /// </summary>
    private Shader shaderWireframe;

    /// <summary>
    /// Reference to the ZEDRenderingPlane component of the camera we copy. 
    /// </summary>
	private ZEDRenderingPlane renderingPlane;

    /// <summary>
    /// Creates the duplicate camera that renders only the scanned mesh.
    /// Rendering targets a RenderTexture that ZEDRenderingPlane will blend in at OnRenderImage(). 
    /// This gets called by ZEDManager.OnZEDReady when the ZED is finished initializing. 
    /// </summary>
    void ZEDReady()
    {
        //Create the new GameObject and camera as a child of the corresponding ZED rig camera.
        GameObject go = new GameObject("MeshCamera");
        go.transform.parent = transform;
        go.transform.localPosition = Vector3.zero;
        go.transform.localRotation = Quaternion.identity;
        go.transform.localScale = Vector3.one;
        cam = go.AddComponent<Camera>();
        go.hideFlags = HideFlags.HideAndDontSave;//This hides the new camera from scene view. Comment this out to see it in the hierarchy. 

        //Set the target texture to a new RenderTexture that will be passed to ZEDRenderingPlane for blending. 
        if (sl.ZEDCamera.GetInstance().IsCameraReady)
        {
            meshTex = new RenderTexture(sl.ZEDCamera.GetInstance().ImageWidth, sl.ZEDCamera.GetInstance().ImageHeight, 0, RenderTextureFormat.ARGB32, RenderTextureReadWrite.Default);
            meshTex.Create();
        }

        //Set the camera's parameters. 
        cam.enabled = false;
        cam.cullingMask = (1 << sl.ZEDCamera.TagOneObject); //Layer set aside for planes and spatial mapping meshes. 
        cam.targetTexture = meshTex;
        cam.nearClipPlane = 0.1f;
        cam.farClipPlane = 500.0f;
        cam.fieldOfView = sl.ZEDCamera.GetInstance().GetFOV() * Mathf.Rad2Deg;
        cam.projectionMatrix = sl.ZEDCamera.GetInstance().Projection;
        cam.backgroundColor = new Color(0, 0, 0, 0);
        cam.clearFlags = CameraClearFlags.Color;
        cam.renderingPath = RenderingPath.VertexLit;
        cam.depth = 0;
        cam.depthTextureMode = DepthTextureMode.None;

#if UNITY_5_6_OR_NEWER
        cam.allowMSAA = false;
        cam.allowHDR = false;
#endif
        cam.useOcclusionCulling = false;

        shaderWireframe = (Resources.Load("Materials/SpatialMapping/Mat_ZED_Wireframe_Video_Overlay") as Material).shader;

        //Set the ZEDRenderingPlane blend texture to the one the new camera renders to.
        renderingPlane = GetComponent<ZEDRenderingPlane>();
		renderingPlane.SetTextureOverlayMapping(meshTex); 
    }

    /// <summary>
    /// Subscribes to relevant events. 
    /// </summary>
    private void OnEnable()
    {
        ZEDSpatialMapping.OnMeshStarted += SpatialMappingStarted;
        ZEDManager.OnZEDReady += ZEDReady;
    }

    /// <summary>
    /// Unsubscribes from relevant events. 
    /// </summary>
    private void OnDisable()
    {
        ZEDSpatialMapping.OnMeshStarted -= SpatialMappingStarted;

        ZEDManager.OnZEDReady -= ZEDReady;
    }


    /// <summary>
    /// Sets hasStarted to true. Called from ZEDSpatialMapping once it has started scanning. 
    /// </summary>
    void SpatialMappingStarted()
    {
        hasStarted = true;
    }

    /// <summary>
    /// Renders the plane each frame, before cameras normally update, so the RenderTexture is ready to be blended. 
    /// </summary>
    void Update()
    {
        if (ZEDSpatialMapping.display && hasStarted)
        {
            cam.enabled = true;
            GL.wireframe = true;
			cam.RenderWithShader(shaderWireframe, "RenderType");
            GL.wireframe = false;
            cam.enabled = false;
        }
    }

    /// <summary>
    /// Releases the target RenderTexture when the application quits. 
    /// </summary>
    private void OnApplicationQuit()
    {
        if (meshTex != null && meshTex.IsCreated())
        {
            meshTex.Release();
        }
    }
}
